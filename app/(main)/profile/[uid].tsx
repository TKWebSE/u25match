// app/(main)/profile/[uid].tsx
import CustomHeader from '@components/common/CustomHeader';
import CustomPagination from '@components/common/CustomPagination';
import TagList from '@components/explore/TagList';
import { ProfileDetail, profileDetailService } from '@services/profile';
import { getOnlineStatus } from '@utils/getOnlineStatus';
import { getPlatformValue, isWeb } from '@utils/platform';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  Dimensions,
  FlatList,
  Image,
  NativeScrollEvent, NativeSyntheticEvent,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  useWindowDimensions
} from 'react-native';

const { width } = Dimensions.get('window');

export default function ProfileScreen() {
  const { uid } = useLocalSearchParams();
  const router = useRouter();
  const { width: windowWidth } = useWindowDimensions();
  const [onlineStatus, setOnlineStatus] = useState('Ë™≠„ÅøËæº„Åø‰∏≠...');
  const [profile, setProfile] = useState<ProfileDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [liked, setLiked] = useState(false);
  const [activeDotIndex, setActiveDotIndex] = useState(0);

  // WebÁâà„Åß„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑÂπÖ„Å®‰ΩôÁôΩ„ÅÆË®àÁÆó
  const contentWidth = isWeb ? Math.min(windowWidth * 0.9, 900) : windowWidth; // WebÁâà„Åß„ÅØÁîªÈù¢ÂπÖ„ÅÆ90%„ÄÅÊúÄÂ§ß900px
  const contentMargin = isWeb ? (windowWidth - contentWidth) / 2 : 0; // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂ∑¶Âè≥‰ΩôÁôΩ

  useEffect(() => {
    loadProfileDetail();
  }, [uid]);

  // „Éó„É≠„Éï„Ç£„Éº„É´„ÇíÂèñÂæó
  const loadProfileDetail = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîç „Éó„É≠„Éï„Ç£„Éº„É´Ë©≥Á¥∞„ÇíÂèñÂæó‰∏≠...', { uid });

      const response = await profileDetailService.getProfileDetail(uid as string);

      console.log('üìã „Éó„É≠„Éï„Ç£„Éº„É´Ë©≥Á¥∞„É¨„Çπ„Éù„É≥„Çπ:', response);

      if (response.success && response.data) {
        setProfile(response.data);
        const status = getOnlineStatus(response.data.lastActiveAt);
        setOnlineStatus(status);
        console.log('‚úÖ „Éó„É≠„Éï„Ç£„Éº„É´Ë©≥Á¥∞ÂèñÂæóÊàêÂäü');
      } else {
        const errorMessage = response.error || '„Éó„É≠„Éï„Ç£„Éº„É´„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
        console.error('‚ùå „Éó„É≠„Éï„Ç£„Éº„É´Ë©≥Á¥∞ÂèñÂæóÂ§±Êïó:', errorMessage);
        setError(errorMessage);
      }
    } catch (err) {
      const errorMessage = '„Éó„É≠„Éï„Ç£„Éº„É´„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
      console.error('üí• „Éó„É≠„Éï„Ç£„Éº„É´Ë©≥Á¥∞ÂèñÂæó„Ç®„É©„Éº:', err);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // „ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥„ÇíÊäº„Åó„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
  const handleLike = async () => {
    try {
      const response = await profileDetailService.sendLike(uid as string);
      if (response.success) {
        setLiked(true);
        // „ÅÑ„ÅÑ„Å≠„Ç´„Ç¶„É≥„Éà„ÇíÊõ¥Êñ∞
        if (profile) {
          setProfile({
            ...profile,
            likeCount: profile.likeCount + 1,
          });
        }
      } else {
        console.error('Like error:', response.error);
      }
    } catch (err) {
      console.error('Like error:', err);
    }
  };

  // ÁîªÂÉè„Çπ„É©„Ç§„ÉÄ„Éº„ÅÆ„Çπ„ÇØ„É≠„Éº„É´Âá¶ÁêÜ
  const handleScroll = (event: NativeSyntheticEvent<NativeScrollEvent>) => {
    const contentOffsetX = event.nativeEvent.contentOffset.x;
    const imageSize = width - 32;
    const index = Math.round(contentOffsetX / imageSize);
    setActiveDotIndex(index);
  };

  // Ë™≠„ÅøËæº„Åø‰∏≠„ÅÆË°®Á§∫
  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#6C63FF" />
        <Text style={styles.loadingText}>Ë™≠„ÅøËæº„Åø‰∏≠...</Text>
      </View>
    );
  }

  // „Ç®„É©„ÉºÊôÇ„ÅÆË°®Á§∫
  if (error || !profile) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error || '„Éó„É≠„Éï„Ç£„Éº„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={loadProfileDetail}>
          <Text style={styles.retryButtonText}>ÂÜçË©¶Ë°å</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* „Ç´„Çπ„Çø„É†„Éò„ÉÉ„ÉÄ„Éº */}
      <CustomHeader title="„Éó„É≠„Éï„Ç£„Éº„É´" />

      <ScrollView style={styles.scrollContainer}>
        {/* „Ç≥„É≥„ÉÜ„É≥„ÉÑÂÖ®‰Ωì„Å´‰ΩôÁôΩ„ÇíÈÅ©Áî® */}
        <View style={[styles.contentContainer, { marginHorizontal: contentMargin }]}>
          {/* ÁîªÂÉè„Çπ„É©„Ç§„ÉÄ„Éº */}
          <View style={styles.imageContainer}>
            <FlatList
              horizontal
              pagingEnabled
              showsHorizontalScrollIndicator={false}
              data={profile.images}
              keyExtractor={(_, i) => i.toString()}
              onScroll={handleScroll}
              getItemLayout={(data, index) => ({
                length: width - 32,
                offset: (width - 32) * index,
                index,
              })}
              renderItem={({ item }) => (
                <Image source={{ uri: item }} style={styles.profileImage} />
              )}
            />
            <CustomPagination dotsLength={profile.images.length} activeDotIndex={activeDotIndex} />
          </View>

          {/* ÂêçÂâçÂπ¥ÈΩ¢Ôºã„Ç™„É≥„É©„Ç§„É≥ */}
          <View style={styles.header}>
            <Text style={styles.name}>
              {profile.name}Ôºà{profile.age}Ê≠≥Ôºâ
            </Text>
            <Text style={styles.online}>{onlineStatus}</Text>
            <Text style={styles.likes}>üíñ {profile.likeCount} „ÅÑ„ÅÑ„Å≠</Text>
          </View>

          {/* Ëá™Â∑±Á¥π‰ªã */}
          <View style={styles.bioContainer}>
            <Text style={styles.bioTitle}>Ëá™Â∑±Á¥π‰ªã</Text>
            <Text style={styles.bio}>{profile.bio}</Text>
          </View>

          {/* „Çø„Ç∞ */}
          <TagList tags={profile.tags} />

          {/* Ë©≥Á¥∞„Éó„É≠„Éï„Ç£„Éº„É´ */}
          <View style={styles.detailsSection}>
            {Object.entries(profile.details).map(([label, value]) => (
              <View key={label} style={styles.detailRow}>
                <Text style={styles.detailLabel}>{label}</Text>
                <Text style={styles.detailValue}>{value}</Text>
              </View>
            ))}
          </View>
        </View>
      </ScrollView>

      {/* „ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥ */}
      {!liked && (
        <View style={styles.likeButtonContainer}>
          <TouchableOpacity style={styles.likeButton} onPress={handleLike}>
            <Text style={styles.likeText}>üíñ „ÅÑ„ÅÑ„Å≠„Åô„Çã</Text>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  scrollContainer: {
    flex: 1,
    backgroundColor: '#fff'
  },
  contentContainer: {
    // „Ç≥„É≥„ÉÜ„É≥„ÉÑÂÖ®‰Ωì„ÅÆ„Çπ„Çø„Ç§„É´
  },
  imageContainer: {
    width: '100%',
    height: getPlatformValue(500, width),
    overflow: 'hidden',
    marginHorizontal: 16,
  },
  profileImage: {
    width: width - 32,
    height: getPlatformValue(500, width),
    resizeMode: 'cover',
    borderRadius: 12,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    padding: 20,
  },
  errorText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 20,
  },
  retryButton: {
    backgroundColor: '#6C63FF',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
  },
  retryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  header: {
    padding: 16,
    alignItems: 'center'
  },
  name: {
    fontSize: 24,
    fontWeight: 'bold'
  },
  online: {
    fontSize: 14,
    color: '#4caf50',
    marginTop: 4
  },
  likes: {
    fontSize: 14,
    color: '#888',
    marginTop: 4
  },
  bio: {
    paddingHorizontal: 16,
    fontSize: 16,
    marginVertical: 12
  },
  bioContainer: {
    backgroundColor: '#f6f7fb',
    padding: 16,
    borderRadius: 12,
    marginHorizontal: 16,
    marginBottom: 12,
  },
  bioTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  tagsSection: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
    padding: 16
  },
  tagCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f6f7fb',
    borderRadius: 12,
    padding: 10,
    marginRight: 8,
    marginBottom: 8,
  },
  tagImage: {
    width: 40,
    height: 40,
    borderRadius: 8,
    marginRight: 10
  },
  tagText: {
    fontSize: 14,
    fontWeight: '500'
  },
  detailsSection: {
    padding: 16,
    paddingBottom: 100, // „ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥„Å®„ÅÆÈñìÈöî„ÇíÁ¢∫‰øù
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 6,
    borderBottomWidth: 0.5,
    borderColor: '#ddd',
  },
  detailLabel: {
    color: '#666'
  },
  detailValue: {
    fontWeight: '500'
  },
  likeButtonContainer: {
    position: 'absolute',
    bottom: 24,
    left: 20,
    right: 20,
    alignItems: 'center',
  },
  likeButton: {
    backgroundColor: '#FF69B4',
    paddingVertical: 14,
    paddingHorizontal: 40,
    borderRadius: 50,
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowRadius: 10,
    elevation: 5,
  },
  likeText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
}); 
